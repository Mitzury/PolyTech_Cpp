#include "myRect.h"
#include "myString.h"
#include <iostream>
#include "Bochka.h"

#define stop __asm nop

int main()
{
using namespace std;

	//Задание 1.Объявление класса. Создание экземпляра класса.
	//Вызов методов класса.  
	//Откройте закладку Class View - (здесь Вы увидите имена методов и
	//данных - классов Rect и MyString)
	//Обратите внимание на пиктограммы слева от имен членов класса - они
	//обозначают спецификатор доступа к каждому члену класса.

	//Какой конструктор вызывается при создании экземпляра класса?

{
	Rect rect; //Вызывается конструктор без параметров
	cout << "#### Chapter 1 \n";
	std::cout << "Rect1: " << rect.m_left << ", " << rect.m_right << ", " << rect.m_top << ", " << rect.m_bottom << std::endl;

}

	//1a. Объявите и определите конструктор с параметрами для
	//инициализации переменных класса. Создайте экземляры класса Rect
	//с помощью конструктора с параметрами. Если компилятор выдает
	//ошибку в предыдущем фрагменте, подумайте - чего ему не
	//хватает? Добейтесь отсутствия ошибок.
	//Выполняя задание с самого начала по шагам, определите:
	//в какой момент происходит вызов конструктора(какого?)?

{
	cout << "\n#### Chapter 1.1a \n";
	Rect rect2(4, 2, 3, 1);
	std::cout << "Rect2: " << rect2.m_left << ", " << rect2.m_right << ", " << rect2.m_top << ", " << rect2.m_bottom << std::endl;


	//Замечание*: хорошо было бы учесть тот факт, что прямоугольник
	//может оказаться "ненормализованным", то есть m_left>m_right или/и
	//m_top>m_bottom
	//Подсказка: учтите, что пользователь Вашего класса может указывать
	//в качестве параметров любые значения! Например:

	// Rect rrr(4,3,2,1);

	//1б. При конструировании объекта посредством конструктора без параметров
	//предусмотрите инициализацию переменных класса, например, нулем
	cout << "\n#### Chapter 1B \n";
	Rect rect3;
	rect3.PrintRect();
}

	//1в. Объявите, определите и вызовите метод класса InflateRect(), 
	//который увеличивает размеры прямоугольника на заданные приращения
	//(раздвигая стороны от центра - каждую сторону на свое значение).
	//Подсказка: объявить и определить методы можно не только "вручную",
	//но и с помощью Wizard-a Class View. Для этого: откройте закладку
	//ClassView окна проекта, сделайте активным класс Rect и нажмите
	//правую кнопку мыши - в появившемся контекстном меню выберите
	//Add/Add Member Function... С помощью появившейся диалоговой панели
	//"дайте указания" Wizard-у как объявить и определить метод.
	{
		cout << "\n#### Chapter 1.1B \n";
		Rect rect2;
		rect2.InflateRect(1, 1);
		std::cout << "Rect2 after InflateRect: " << rect2.m_left << ", " << rect2.m_right << ", " << rect2.m_top << ", " << rect2.m_bottom << std::endl;
		
	}


	//Задание 2.Перегрузка конструкторов и методов класса.
	//Конструктор копирования.

	//2а.Объявите и определите конструктор копирования в классе Rect.
	//Выполняя задание по шагам, определите, какой
	//конструктор вызывается при создании r1,r2,r3 и r4?
	//Чему равны переменные созданных объектов?
	{
		cout << "\n#### Chapter 2.2a \n";
		Rect r1;  // Вызывается конструктор без параметров
		Rect r2(1, 2, 3, 4);  // Вызывается конструктор с параметрами
		Rect r3 = r1;  // Вызывается конструктор копирования
		Rect r4(r2);  // Вызывается конструктор копирования
		r1.PrintRect();
		r2.PrintRect();
		r3.PrintRect();
		r4.PrintRect();
	}


  //2б. Объявите и определите в классе Rect метод InflateRect(),
	//который принимает два аргумента, по умолчанию равных 1, и 
	//раздвигает стороны прямоугольника на на заданные приращения.
	//Для каких объектов вызывается функция InflateRect()?
	{
		Rect r1;
		Rect r2;
		Rect r3;
		Rect r4;
		cout << "\n#### Chapter 2.2B \n";
		r1.InflateRect(1, 1);
		r2.InflateRect(2, 2);
		r3.InflateRect(2, 2, 2, 2);
		r4.InflateRect(3, 3);
		//	r3.InflateRect(5);
		//  r3.InflateRect();
		r1.PrintRect();
		r2.PrintRect();
		r3.PrintRect();
		r4.PrintRect();
	}

	//Задание 3.Спецификаторы доступа. Инкапсуляция. 
	{
	Rect r;
	//Раскомментируйте следующую строку. Объясните ошибку компилятора
    //	int tmp = r.m_left;
	/*
		Данная строка int tmp = r.m_left; вызовет ошибку компиляции, так как m_left является членом класса Rect, 
		объявленным с модификатором private.
		Спецификатор доступа private означает, что члены класса (переменные или функции) с этим модификатором доступа 
		могут быть использованы только внутри самого класса, но не снаружи. Таким образом, попытка обращения к m_left вне класса приводит 
		к ошибке компиляции, поскольку переменные с private доступом недоступны за пределами класса, где они объявлены.
	*/
	//Введите в класс Rect метод void SetAll(...),
	//который присваивают переменным класса передаваемые значения. Вызовите созданный метод, проверьте корректность. 
	//Введите в класс Rect парный метод GetAll(...),
	//который "достает" значения private-переменных класса. Вызовите созданный метод, проверьте корректность. 
	cout << "\n#### Chapter 3 \n";
	r.SetAll(1, 2, 3, 4);
	int left, right, top, bottom;
	r.GetAll(left, right, top, bottom);
	r.PrintRect(); 
	}

/*
	//Задание 4.Передача экземпляра класса в качестве параметра функции. 
	//Возвращение объекта класса по значению. Поставив остановы в конструкторе копирования или выполняя фрагмент
	//по шагам, определите: в какой момент происходит обращение к конструктору копирования. 
	//Создайте глобальную функцию 
	// Rect BoundingRect(Rect, Rect); которая принимает два объекта класса Rect по значению и
	//возвращает объект класса Rect, который является прямоугольником, в который вписаны заданные прямоугольники. 
	Как происходит передача параметров и возвращение объекта класса?
*/


	{
		
	Rect r1(1,2,3,4), r2(5,6,7,8),r3;
	
	//Задание 4а. Передача объектов по ссылке.
	//Создайте глобальную функцию BoundingRect2, которая выполняет ту же
	//задачу, принимая параметры по ссылке
	//Вызываются ли конструкторы при передаче параметров?
	
	cout << "\n#### Chapter 4.a \n";
	r3 = BoundingRect(r1, r2);
	r3.PrintRect();

	}
	{
		Rect r1;
		Rect r2;
		Rect r3;
		//Задание 4б.Реализуйте ту же задачу (BoundingRect) методом класса
		cout << "\n#### Chapter 4.b \n";
		r3 = BoundingRect2(r1, r2);
		r3.PrintRect();
	}
/*
	//Задание 5. Когда вызываются конструкторы и деструкторы.
	//Объявите и определите
	//явный деструктор класса. Поставьте остановы в 
	//конструкторе (конструкторах) и деструкторе. Определите: когда для
	//каждого из объектов вызывается конструктор, а когда - деструктор?
*/
	{

		Rect r1;
		Rect*	pR = new Rect(1,2,1,2);	
		{
			Rect r2(r1);
			Rect arRect[2];
			for(int i=0; i<3; i++)
			{
				static Rect r3 (i,i,i,i) ;
				Rect r4(*pR);
				Rect r5(i,i,i,i);
			}
		}
		delete pR;	
		stop
	}
/* 
	//Задание 6.Конструктор + деструктор = функциональное
	// замыкание. Класс MyString
	// Посредством конструктора (конструкторов) и деструктора обеспечьте
	//корректные инициализацию и деактивацию объекта
	//C помощью остановов определите когда происходит
	//захват и освобождение памяти для строки-члена класса
*/
	{
		cout << "\n#### Chapter 6 \n";
		MyString	str1("It's my string1!");
		//Создайте метод GetString(), который обеспечит доступ к хранящейся строке.
		//С помощью cout и метода GetString() распечатайте строку объекта str1
		//Замечание: подумайте, как следует корректно реализовать метод GetString().

		//Подсказка 1:
		//приведенный ниже код должен работать:

		// Выводим строку с помощью метода GetString()
		std::cout << str1.GetString() << std::endl;

		//Подсказка 2:
	    // Попытка изменения строки не должна компилироваться
	    // str1.GetString()[1] = 'W'; // ошибка, так как GetString() возвращает const char*


		//Подсказка 3:
		//приведенный ниже код должен работать:
		// Выводим строку с помощью метода GetString()
		const MyString	str2("It's my string2!");
		std::cout << str2.GetString() << std::endl;
	}
/*
	//6a. Раскомментируйте следующий фрагмент. Подумайте - какие
	//неприятности Вас ожидают. Попробуйте исправить положение (как?)
*/
		{
		    cout << "\n#### Chapter 6a \n";
			MyString str1("The first string!");
			MyString str2 = str1;
		} // Деструкторы вызываются для str1 и str2


	//6б. Реализуйте метод SetNewString, который будет заменять строку
	// на новую

		cout << "\n#### Chapter 6.b \n";
		MyString str3("Original String");
		std::cout << "Original String: " << str3.GetString() << std::endl;

		// Изменяем строку с помощью SetNewString
		str3.SetNewString("Updated String");
		std::cout << "Updated String: " << str3.GetString() << std::endl;


	//Задание 7.  Решите с помощью классов следующую задачу:
	//даны две бочки известного объема. В одной бочке в начальный момент
	//времени содержится спирт (96%), в другой – вода.
	//Кружкой емкостью 1л переливаем итеративно содержимое из одной бочки
	//в другую следующим способом: на каждой итерации
	//зачерпнули из первой бочки -> вылили во вторую
	//зачерпнули из второй бочки -> вылили в первую.
	//Требуется определить номер итерации, на которой концентрация спирта в
	//первой бочке станет меньше 50%.

	//Bochka spirt(...);
	//Bochka water(...);
	//...
	//	while(концентрация спирта в бочке spirt > 50%)
	//	{
	//		spirt.Pereliv(water); //или spirt.Pereliv(water, объем_кружки);
	//		water.Pereliv(spirt); // аналогично
	//		...

	//	} 159
		cout << "\n#### Chapter 7 \n";
		Bochka spirt(10.0, 96.0);
		Bochka water(10.0, 0.0);

		int iteration = IterativePereliv::FindIterationNumber(spirt, water);

		std::cout << "Number of iterations: " << iteration << std::endl;

return 0;

}

