
/*************************************************************
	Практическое занятие №2 курс С110. Функции.
	"Старые" потоковые функции стандартной библиотеки
	Указатели на функции

*************************************************************/
#include <iostream>
#include <tchar.h>
//#include <cstdio>
//#include <cstdarg>
#include "other.h"

typedef const char* (*StringFunction)();

int _tmain()
{
#if 0;
	//Задание 1. 
	//массивы в качестве аргументов функции.
	//Напишите два варианта функции печати элементов
	//1. встроенного двумерного массива
	//int ar[N][M]; //подумайте - как и где должны быть заданы N и M

	//Замечание:
	// Задать значения элементам массива можно либо с помощью списка инициализации, 
	// либо с помощью кода 
	// 
	//Вызов функции PrintArray   может выглядеть так:

//	PrintArray(ar, ... может быть, понадобится передать еще какие-нибудь данные);  //Важно! первый параметр- имя двумерного (!) массива


	//2. динамического двумерного массива (обе размерности вычисляются)
	//Замечание:
	// Задать значения элементам массива можно с помощью кода 
	int builtInArray[N][M] = { {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12} };

	int builtInArray2[][M] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15,16};

	// Вызов функции для встроенного двумерного массива
	std::cout << "Printing Built-in Array:" << std::endl;
	printBuiltInArray(builtInArray2);

	// Выделение и заполнение динамического массива
	int dynamicRows = 2;
	int dynamicCols = 3;
	int** dynamicArray = new int* [dynamicRows];
	for (int i = 0; i < dynamicRows; ++i) {
		dynamicArray[i] = new int[dynamicCols];
		for (int j = 0; j < dynamicCols; ++j) {
			dynamicArray[i][j] = i * dynamicCols + j + 1;
		}
	}

	// Вызов функции для динамического двумерного массива
	std::cout << "\nPrinting Dynamic Array:" << std::endl;
	printDynamicArray(dynamicArray, dynamicRows, dynamicCols);

	// Освобождение памяти для динамического массива
	for (int i = 0; i < dynamicRows; ++i) {
		delete[] dynamicArray[i];
	}
	delete[] dynamicArray;

#endif;
#if 0;

	/////////////////////////////////////////////////////////////////////////////
		//Задание 2.
		//Передача имени встроенного двумерного массива в качестве параметра функции.
				//Напишите две взаимодополняющие друг друга функции:
				//1.  ... DayOfYear(...)
				//- преобразует день месяца (число,месяц и год задаются в качестве параметров)
				//в порядковый день года(возвращаемое значение)
				//2. ... DayOfMonth(...) - функция преобразует порядковый день года в день месяца
				// (принимает год и порядковый день года в качестве параметров и должна сформировать
				// день месяца и номер месяца и каким-то образом сообщить эти значения вызывающей процедуре)

				//В процессе вычислений Вам придется учитывать "високосный - невисокосный" год.
				//для проверки "високосности" года имеет смысл создать функцию (isLeepYear)
				//Для этого предлагается в каждую функцию в качестве одного из параметров передавать
				//данные приведенного ниже двухмерного массива nDayTab

		//Проверьте работоспособность обеих функций с помощью следующего фрагмента:

		//Вызов функции DayOfYear   может выглядеть так:

		//size_t day = ..., month = ..., year = ...;
		//size_t numDay = DayOfYear(day, month, year, nDayTab);  //Важно! последний параметр- имя двумерного (!) массива


		//Проверка результата обратной функцией DayOfMonth        //Важно! последний параметр- имя двумерного (!) массива
		//...

	//size_t day = 10, month = 2, year = 2023;
	size_t day = 12, month = 12, year = 2000;
	size_t numDay = DayOfYear(day, month, year, nDayTab);

	// Вызов функции DayOfYear
	std::cout << "Day of Year: " << numDay << std::endl;

	size_t resultDay, resultMonth;

	// Проверка результата обратной функцией DayOfMonth
	DayOfMonth(numDay, year, resultDay, resultMonth, nDayTab);
	std::cout << "Day of Month: " << resultDay << ", Month: " << resultMonth << std::endl;

#endif;
#if 1;
	/////////////////////////////////////////////////////////////////////////////
//Задание 3.
	//Задание 3а. Функции с переменным числом параметров.
	//Напишите функцию (дана заготовка VarArgs, не использующая
	// макросы), которая принимает переменное число аргументов
	// типа int и выводит на печать число принятых параметров и
	// их значения.
	// Признаком конца списка является нулевое значение.

	int nN1=5, nN2=11, nN3=4, nN4=7, nN5=-1;
	VarArgs(nN1,0);
	VarArgs(nN1,nN2,0);
	VarArgs(nN1,nN2,nN3,nN4,nN5,0);



	//Задание 3б. Модифицируйте функцию 3а с помощью макросов
	// va_start, va_arg, va_end

	VarArgs_1(nN1, nN2, nN3, nN4, nN5, 0);

#endif;
#if 0;
	///////////////////////////////////////////////////////////////////
	//Тема "Старые" потоковые функции стандартной библиотеки
	//Задание 4.1 С помощью функции scanf сформирйуте три коэффициента: A,B,C


	//Задание 4.2. Выведите таблицу значений y=A*x*x + B*x + C
	//при изменении x в диапазоне -2 до +2 с шагом 0.5

	double A, B, C;

	// Задание 4.1: Ввод коэффициентов A, B и C
	inputCoefficients(A, B, C);

	// Задание 4.2: Вывод таблицы значений
	printTable(A, B, C);


#endif;
#if 1;
	///////////////////////////////////////////////////////////////////
	//Тема Указатели на функции

	//Задание 5. Указатель на функцию. "Калькулятор".
	//Напишите функции:
	//1)Sum - принимает два значения double и возвращает сумму
	//этих значений
	//2)Sub- принимает два значения double и возвращает разность
	//этих значений
	//3)Mul - *
	//4)Div - /
	//5)а для возведения в степень можете использовать функцию стандартной библиотеки
	//		- pow(). Подсказка 1: прототип функции находится в <cmath>.
	//		Подсказка 2: стандартная библиотека предоставляет несколько перегруженных
	//		вариантов этой функции, а Вам потребуется сформировать указатель на 
	//		double pow(double, double);

	//Предоставьте пользователю	следующую возможность:
	//пока пользователь хочет пользоваться услугами Вашего калькулятора,
	//он может вводить два значения и знак операции
	//а Вы выводите результат. Результат получаете посредством вызова
	//соответствующей Вашей функции по указателю.
	//Предусмотрите возможность ввода непредусмотренного знака операции

	char operation;
	double operand1, operand2;
	double result;


	double (*operationFunction)(double, double) = nullptr;

	do {
		std::cout << "Enter two values and an operation (+, -, *, /, ^): ";
		std::cin >> operand1 >> operand2 >> operation;


		switch (operation) {
		case '+':
			operationFunction = &Sum;
			break;
		case '-':
			operationFunction = &Sub;
			break;
		case '*':
			operationFunction = &Mul;
			break;
		case '/':
			operationFunction = &Div;
			break;
		case '^':
			operationFunction = &Power;
			break;
		default:
			std::cout << "Invalid operation. Try again." << std::endl;
			continue;
		}


		result = operationFunction(operand1, operand2);

		std::cout << "Result: " << result << std::endl;

		std::cout << "Do you want to continue? (y/n): ";
		char choice;
		std::cin >> choice;
		if (choice != 'y' && choice != 'Y') {
			break;
		}
	} while (true);


#endif;
#if 1;
	///////////////////////////////////////////////////////////////////
		//Задание 6. Указатель на функцию в качестве аргумента.
		//Дана заготовка функции сортировки любых объектов - Sort.
		//Функция принимает следующие параметры:
		//1) указатель на первый сортируемый элемент
		//2) количество сортируемых элементов
		//3) размер элемента в байтах
		//4) указатель на функцию перестановки элементов
		//5) указатель на функцию сравнения элементов

		//6a. Напишите функцию перестановки двух целых значений -
		// SwapInt, которая принимает два void указателя и 
		//меняет значения местами

		//Напишите функцию сравнения двух целых значений -
		// CmpInt, которая принимает два void указателя и
		//возвращает int результат сравнения: 
		//<0 - первый элемент меньше, чем второй
		//=0 - равны
		//>0 - первый элемент больше, чем второй
		/*
			int nAr[]=...	//массив для сортировки
		*/
			int nAr[] = { 4, 2, 8, 1, 66, 5 };
			int nArSize = sizeof(nAr) / sizeof(nAr[0]);
			//Печать исходного массива
			std::cout << "Original array: ";
			for (int i = 0; i < nArSize; ++i) {
				std::cout << nAr[i] << " ";
			}
			std::cout << std::endl;
			//Вызов сортировки
			Sort(reinterpret_cast<char*>(&nAr[0]), nArSize, sizeof(int), SwapInt, CmpInt);
			//Печать результатов сортировки
			std::cout << "Sorted array: ";
			for (int i = 0; i < nArSize; ++i) {
				std::cout << nAr[i] << " ";
			}
			std::cout << std::endl;

		/*
		//Задание 6б. По аналогии с 6а создайте вспомогательные
		//функции - SwapDouble и CmpDouble и вызовите функцию Sort
		//для сортировки массива вещественных значений.
		*/
			double dAr[] = { 4.2, 2.1, 8.5, 1.7, 6.3 };
			int dArSize = sizeof(dAr) / sizeof(dAr[0]);

			std::cout << "\nOriginal double array: ";
			for (int i = 0; i < dArSize; ++i) {
				std::cout << dAr[i] << " ";
			}
			std::cout << std::endl;

			Sort(reinterpret_cast<char*>(&dAr[0]), dArSize, sizeof(double), SwapDouble, CmpDouble);

			std::cout << "Sorted double array: ";
			for (int i = 0; i < dArSize; ++i) {
				std::cout << dAr[i] << " ";
			}
			std::cout << std::endl;


		/*
		//Задание 6в*. По аналогии с 6а создайте вспомогательные
		//функции - SwapStr и CmpStr и вызовите функцию Sort
		//для сортировки массива указателей на строки.
		*/

		const char* arStr[] = { "QQQ", "SDF", "ABC", "Abba", "ENFR", "En" };
		std::cout << "\nOriginal string array: ";
		for (const char* str : arStr) {
			std::cout << str << " ";
		}
		std::cout << std::endl;


		Sort(reinterpret_cast<char*>(&arStr[0]), 6, sizeof(const char*), SwapStr, CmpStr);


		std::cout << "Sorted string array: ";
		for (const char* str : arStr) {
			std::cout << str << " ";
		}
		std::cout << std::endl;


		//Замечание:

		//в массиве линейно лежат АДРЕСА строк, надо передать АДРЕС массива,
		//	Sort(reinterpret_cast<char*>(&arStr[0])), nTotal, sizeof(???), SwapStr, CmpStr);
		
#endif;
#if 0;
	///////////////////////////////////////////////////////////////////
		/*
		//Задание 7. Массивы указателей на функцию.
		//Напишите несколько функций вида
		//const char* GetString1();
		//const char* GetString2();
		//const char* GetString3();
		//const char* GetString4();
		//const char* GetString5();
		*/
	
		//		...., каждая из функций возвращает указатель на свою строку
		//(подумайте - какой адрес Вы имеете право возвращать из функции)

		// Вам предоставлен код этих функций.
		//Подумайте:
		//1) все ли они корректны, если нет, то как исправить некорректность
		//2) может быть требуются какие-то дополнительные действия

		//Объявите и проинициализируйте массив указателей на функции
		//GetString1,GetString2...
		//Введите номер функции, которую Вы хотите вызвать:
			int n;
		//Вызовите функцию
		//Распечатайте результат
		StringFunction stringFunctions[] = {
			GetString1,
			GetString2,
			GetString3,
			GetString4,
			GetString5
		};


	std::cout << "Enter the number of the function you want to call (1-5): ";
	std::cin >> n;


	if (n < 1 || n > 5) {
		std::cout << "Invalid input. Exiting." << std::endl;
		return 1;
	}


	const char* result = stringFunctions[n - 1]();


	std::cout << "Result: " << result << std::endl;

#endif;
	return 0;
}
