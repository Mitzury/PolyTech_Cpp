#include <string>
#include <iostream>
#include <cstdint>
#include <algorithm>
#include <iterator>
#include <memory>

#include "T.h"
#include <vector>
#include <list>
#include <deque>
#include <set>
#include <array>
#include <stack>
#include <queue>

using namespace std;

int main() {
	setlocale(LC_ALL, "Ru");
	using namespace std;
//////////////////////////////////////////////////////////////////////////////////////////////
//Задание 1. Реализуйте вычисление факториала с помощью constexpr-функции.
//
//Подсказки/напоминания: 
//		- constexpr – функция должна состоять из единственной инструкции return <выражение>; (пока!)
//		- но это выражение может включать вызов другой constexpr – функции, в частности рекурсивный
//		  вызов 
//		- если параметр рекурсивной constexpr- функции - это константа, компилятор вычислит результат
//		  на этапе компиляции

//Проверьте тот факт, что компилятор вычисляет значение на этапе компиляции 
// (если в качестве параметра используется константа, известная компилятору на этапе компиляции).
//	Для проверки достаточно создать встроенный массив с размерностью, вычисляемой
//	посредством constexpr-функции:
	{	
		cout << endl << "Chapter 1: " << endl;
		// Примеры использования constexpr-функции для вычисления факториала
		// Создание встроенного массива с размерностью, вычисленной constexpr-функцией
		int ar[factorial(3)];

		// Вычисление факториала на этапе компиляции и сохранение результата в константу
		constexpr int n = factorial(5); 
		// Создание встроенного массива с вычисленным значением размерности
		int ar1[n];

		// Проверка вычисления факториала для переменной m с помощью constexpr-функции
		const int m = 7;
		constexpr int n1 = factorial(m);
		int ar2[n1];

		// Необходимо присваивание результата constexpr-функции переменной для использования в операции
		constexpr int n2 = factorial(m);
	} 

	//////////////////////////////////////////////////////////////////////////////////////////////
	//Задание 2a. Перевод с помощью пользовательского литерала из двоичного представления строкового
	//в значение, например: строку "100000000" -> в значение 256
	//Проверить результат посредством префикса 0b
	//Чтобы вызов пользовательского литерала выглядел просто и читаемо, например: 100000000_b
	//логично использовать пользовательский литерал с единственным параметром - const char*

	//Так как речь идет о литералах, логично вычислять значения на этапе компиляции
	// => реализуйте пользовательский литерал посредством constexpr - функций
	//Подсказка/напоминание: 
	//		- constexpr – функция должна состоять из единственной инструкции return <выражение>;
	//		- но это выражение может включать вызов другой constexpr – функции,
	//		- которая может быть рекурсивной (если параметр такой функции - это константа,
	//		  компилятор вычислит результат вызова рекурсивной функции на этапе компиляции)

	{
		cout << endl << "Chapter 2a: " << endl;
		constexpr int num = "100000000"_b;

		std::cout << "Decimal: " << num << std::endl;
		std::cout << "Binary prefix: " << std::hex << "0b" << num << std::endl;

	}

	//Задание 2b. Перевод в строковое двоичное представление, например: 256 -> "0b100000000"
	//Так как строка может быть любой длины, логичнее и проще возвращать объект std::string
	//=> возвращаемое значение не может быть constexpr!
	//Подсказка: манипулятора std::bin пока нет => преобразование в двоичную строку
	//придется делать вручную
	//Подсказка: количество разрядов в байте определяет константа CHAR_BIT - <cstdint>

	{
		cout << endl << "Chapter 2b: " << endl;
		string sBin = 256_toBinStr;
		std::cout << sBin << std::endl;
	}


	//////////////////////////////////////////////////////////////////////////////////////////////
	//Задание 3. constexpr - объекты 
	//Создать класс (шаблон класса?) для хранения и манипулирования диапазоном значений.
	//В классе должны быть:
	//	переменные для хранения минимального и максимального значений,
	//	методы для получения каждого из значений
	//	метод для проверки - попадает ли указанное значение в диапазон
	//	метод, который получает любое значение данного типа и формирует результирующее значение:
	//							если принадлежит диапазону, то его и возвращаем
	//							если меньше минимального значения, возвращаем минимальное
	//							если больше максимального значения, возвращаем максимальное

	//Проверьте тот факт, что компилятор вычисляет значение на этапе компиляции. 

	{
		cout << endl << "Chapter 3: " << endl;
		constexpr Range<int> intRange(0, 100);

		constexpr int minValue = intRange.getMin();
		constexpr int maxValue = intRange.getMax();
		constexpr bool inRange = intRange.isInRange(50);
		constexpr int clampedValue = intRange.clamp(150);

		std::cout << "Min value: " << minValue << std::endl;
		std::cout << "Max value: " << maxValue << std::endl;
		std::cout << "Is 50 in range: " << std::boolalpha << inRange << std::endl;
		std::cout << "Clamped value of 150: " << clampedValue << std::endl;


	}
	/***************************************************************/
//Задание 4.
	/*
	Реализуйте шаблон функции для печати любых последовательностей (vector, list, deque, set и встроенного массива), которые могут содержать:
	•	как объекты любого типа,
	•	так и указатели на объекты любого типа (указатели распечатывать неинтересно => в этом случае следует получать значение по адресу)
	Подсказки: if constexpr
	*/
	{
		cout << endl << "Chapter 4: " << endl;
		vector<int> vec = { 1, 2, 3, 4, 5 };
		list<double> lst = { 1.1, 2.2, 3.3, 4.4, 5.5 };
		deque<std::string> deq = { "one", "two", "three" };
		set<char> st = { 'a', 'b', 'c' };
		array<float, 3> arr = { 1.1f, 2.2f, 3.3f };
		int arr2[] = { 1, 2, 3, 4, 5 };

		printSequence(vec);
		printSequence(lst);
		printSequence(deq);
		printSequence(st);
		printSequence(arr);
		printSequence(arr2);
	}
	/***************************************************************/
	//Задание 5.
		/* Реализуйте шаблон функции сложения двух значений.
		Если первое слагаемое является вектором, то все элементы вектора нужно увеличить 
		на значение второго параметра. 
		При этом элементы вектора и второй параметр должны быть одного и того же типа.
		Подсказки: if constexpr, is_same
		*/
	{
		cout << endl << "Chapter 5: " << endl;
		std::vector<int> vec = { 1, 2, 3, 4, 5 };
		int scalar = 10;

		auto result_vec = add(vec, scalar);
		for (auto element : result_vec) {
			std::cout << element << " ";
		}
		std::cout << std::endl;

		int x = 5, y = 7;
		auto result_scalar = add(x, y);
		std::cout << result_scalar << std::endl;
	}


	/***************************************************************/
//Задание 6.
	/* 	Реализуйте шаблон функции вывода на печать значений элементов любого адаптера (stack, queue, priority_queue)
	Подсказки: if constexpr, is_same
	Предусмотрите вывод значений, если в адаптере хранятся указатели.
	*/
	{
		std::stack<int> intStack;
		intStack.push(1);
		intStack.push(2);
		intStack.push(3);
		std::cout << "Stack: ";
		printAdapter(intStack);

		std::queue<double> doubleQueue;
		doubleQueue.push(1.1);
		doubleQueue.push(2.2);
		doubleQueue.push(3.3);
		std::cout << "Queue: ";
		printAdapter(doubleQueue);
	}

	/***************************************************************/
//Задание 7.
	/* 	Реализуйте шаблон constexpr функции Smth(), которая должна возвращать значения разного типа
	Подсказки: constexpr, if constexpr
	*/
	//constexpr int res1 = /*<вызов Smth()>;*/ //res1 = 1
	//constexpr double res2 = /*<вызов Smth()>; */ //res2 = 2.2
	//  /*constexpr???*/ std::string res3 = /*<вызов Smth()>; */ //res3 = "abc"


	//***************************************************************/
	//Задание 8.

		/*Пользовательский deduction guide – для вывода типов параметров шаблона
		Задан шаблон класса, который инкапсулирует внедренный ограниченный массив известной
		размерности с элементами любого типа. */
		/*
		template<typename T, size_t size> class MyArray
			{
				T ar[size]; //как обеспечить инициализацию элементов базового типа по умолчанию нулем?
				…
				public:
				MyArray(const T*[, возможно другие параметры]);


			};

		*/
		/*
		//Требуется обеспечить работоспособность приведенных примеров использования.
			{
				MyArray<int, 5> ar1;//MyArray<int,5>
MyArray<char, 5> ar2{"ABCqwerty"};//MyArray<char,5>

				MyArray ar3{"ABC"}; //MyArray<char,4>

int ar[] = { 1,2,3 };
				MyArray ar4{ ar };

			}
		*/


}
