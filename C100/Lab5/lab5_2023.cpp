
/*************************************************************
	Практическое занятие №5. Функции.
	Объявление, определение, вызов.
	Передача параметров. Возвращение значения.
	
*************************************************************/
#include <iostream>
#include <tchar.h>
//#include <cstdio>
//#include <cstdarg>
#include "other.h"


#define	  stop __asm nop

int _tmain()
{
	
	/////////////////////////////////////////////////////////////////////////////
	// Задание 1. Ссылки.
	// 1.1. Объявите ссылку на тип double. Посредством ссылки измените значение

	double x = 3.14;
	double& ref = x;
	ref = 2.71;


	// 1.2. Раскомментируйте  следующую строчку. 
	//Что следует сделать, чтобы linker не выдавал ошибки при создании exe-файла?
	// Подсказка: ref - это внешняя по отношению к данному файлу ссылка!
	//Подумайте, где надо объявить эту внешнюю ссылку, а где ее определить.
	
	extern int ref; // Объявляем внешнюю ссылку
	//ref++;

	// 1.3. Раскомментируйте следующую строку. 
	//Что следует сделать, чтобы компилятор не выдавал ошибки 
	//int& ref1 = x; // Ошибка: не может ссылаться на временное значение


	// 1.4. Задан указатель:
	char c='A';
	char* pc = &c;

	//Объявите ссылку на указатель. Посредством ссылки измените
	//а) значение по адресу
	char d = 'B';
	char*& refPc = pc;
	*refPc = d;

	//б) сам адрес
	char e = 'C';
	char* newPc = &e;
	refPc = newPc;

	 // 1.5. Объявите и определите функцию, вычисляющую квадрат числа, переданного в качестве параметра.
	 //  параметр должен быть ссылкой (!). Вызовите функцию с заданными ниже аргументами
	//Замечание (!!!):
	// объявления функций принято помещать в заголовочный файл (.h),
	// а определения функций- в файл реализации (.cpp)
	// в задании заготовлены файлы other.cpp и other.h. 
	//Эти файлы можно использовать для размещения  Ваших функций.
	{
		int x = 10;
		int res1 = square(x);
		int res2 = square(5);
	}
		stop



////////////////////////////////////////////////////////////////////////////	

	//Задание 2. Отличия при передаче параметров 
	//а) по значению, б) по ссылке, в) по указателю

	// 2.1. Объявите и определите три функции, которые увеличивают заданное
	//с помощью параметра значение на 1 
	// а) - IncByValue(),
	// б) - IncByPointer(), 
	//в) - IncByReference() . 
	//Проверьте правильность с помощью отладчика.

	int val = 1;

	IncByValue(val); // Значение переменной val не изменится
	std::cout << "After IncByValue: " << val << std::endl;

	IncByPointer(&val); // Значение переменной val увеличится на 1
	std::cout << "After IncByPointer: " << val << std::endl;

	IncByReference(val); // Значение переменной val увеличится на 1
	std::cout << "After IncByReference: " << val << std::endl;


	int val = 1;//значение этой переменной должно быть увеличено с помощью
				//каждой из функций на единицу

	stop


	// 2.2 Передача параметров c помощью указателя и по ссылке.
	//Создайте функцию (функции) Swap(), которая меняет значения
	//переменных nX и nY местами.
	
	// а)Функция должна принимать два указателя на int  и оперируя этими указателями
	//   должна менять значения переменных в вызывающей (!) программе

	// б)Функция должна принимать две ссылки на int и оперируя этими ссылками
	//   должна менять значения переменных в вызывающей (!) программе
	//Проверьте правильность с помощью приведенного ниже фрагмента.

	int nX = 1;
	int nY = -1;

	Swap_p(&nX, &nY); // Значения nX и nY поменяются местами
	std::cout << "After Swap_p: nX = " << nX << ", nY = " << nY << std::endl;

	Swap_r(nX, nY); // Значения nX и nY поменяются обратно
	std::cout << "After Swap_r: nX = " << nX << ", nY = " << nY << std::endl;


		////////////////////////////////////////////////////////////////////////////

		//Задание 3. Массивы в качестве аргументов.
		// 3.1. Напишите функцию печати элементов во встроенном одномерном массиве

	const int N = 5;
	int ar1[] = { 1, 2, 3, 4, 5 };
	int ar2[] = { 10, 5, 8, 2, 7 };

	PrintArray(ar1, N);
	PrintArray(ar2, N);
	int min1 = Min(ar1, N);
	int min2 = Min(ar2, N);

	std::cout << "Min in ar1: " << min1 << std::endl;
	std::cout << "Min in ar2: " << min2 << std::endl;
	
	const char* str1 = "Hello";
	const char* str2 = "World";
	int cmpResult = MyStrCmp(str1, str2);
	std::cout << "Comparison result: " << cmpResult << std::endl;

		stop
////////////////////////////////////////////////////////////////////////////
	//Задание 4. Функции работы со строками

		// 4. Создайте и вызовите функцию, которая принимает в качестве параметра 
		//порядковый номер - nN - месяца, 
		//а возвращает  указатель на символьную строку, содержащую название заданного месяца. 
		//Подсказки: 
		//1) для того, чтобы данная функция работала корректно, 
		// очень важно – как объявлена строка, указатель на которую требуется вернуть.
		//2) Кроме того, было бы неплохо предусмотреть защиту при некорректном значении месяца.
		
		{
		const char* mStr = NameOfMonth(3);
		std::cout << mStr << std::endl;
		}
		stop

////////////////////////////////////////////////////////////////////////////
	//Задание 5. Возвращение адреса.
	//Напишите функцию, которая находит адрес минимального элемента в массиве,
	// таким образом, чтобы ее вызов можно было использовать слева от знака 
	// равенства: *MyMin(параметры) = 0;
	
		int numbers[] = { 5, 2, 8, 1, 9, 4 };

		*MyMin(numbers, sizeof(numbers) / sizeof(numbers[0])) = 0;

		for (int i : numbers) {
			std::cout << i << " ";
		}


////////////////////////////////////////////////////////////////////////////
	//Задание 6 (*).
	//Дан одномерный массив из N элементов
	//Известно: значения элементов могут быть только в диапазоне 0, 1, 2 …., 30, 31.  
	//Напишите две функции :
	//•первая - «выясняет» какие значения встречаются в массиве четное число раз, 
	//а какие – нечетное число раз. При этом, для результата можно использовать только один int, 
	//	в который следует "запаковать" результат вычисления ) = >
	//int   f1(параметры);
	// 
	//•вторая –  выводит результат(Например: 0 встречается в массиве четное число раз)

	//В задании привести объявление, определение и вызов функций.
	
//*********************   Дополнительное задание   ****************************************************
//Задание 7 (*)  
// Выполните задания 5 и 6 по курсовой работе 
// описание заданий находится в файлах "Задание (игра Змейка)_5 (функции без параметров)_3" и 
// "Задание (игра Змейка)_6 (функции с параметрами)_3.docs"
// К этим заданиям имеются подсказки, находящиеся в соответствующих файлах 
// Каждое задание выполняется в отдельном проекте
// Рекомендация:
// Все проекты (project), связанные с курсовой работой имеет смысл помещать в одно решение (solution)
//*****************************************************************************************************

	return 0;
}//main
